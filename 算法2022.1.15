










题    目：         算法思路报告                                   
院 （系）：         信息科学学院                            
专    业：	        计算机科学与技术                        
学生姓名：            张恩博                                  
学    号：                                                            
指导教师：               莫倩                                   
二〇二一年十二月






1.要求分别用O(n^2)和O(n)两种时间复杂度的算法找到未排序数组中第K大的数据
1.1时间复杂度为O(n^2)，该方法使用冒泡算法排序后选择第k大数据
代码：
#include<iostream>
using namespace std;

int main()
{
	int k,i,j,t; 
	cin>>k;//输入k
	int a[10] = {8,2,3,9,5,10,7,1,4,6};
//冒泡排序
	for(i = 0;i < 10;i++)
	{
		for(j = 9;j > i;j--)
		{
			if(a[j]<a[j-1])
			{
				t = a[j];
				a[j] = a[j-1];
				a[j-1] = t;
			}
		}
	}
	//输出第k大的数据
	cout<<a[k-1];
}
冒泡算法思想：
1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。
2.每趟从第一对相邻元素开始，对每一对相邻元素作同样的工作，直到最后一对。
3.针对所有的元素重复以上的步骤，除了已排序过的元素(每趟排序后的最后一个元素)，直到没有任何一对数字需要比较。
1.2时间复杂度为O(n)，该方法使用快速算法排序后选择第k大数据
代码：
#include<iostream>
using namespace std;

//快速排序 
void Quick_Sort(int arr[], int begin, int end){
    if(begin > end)//如果开始指针比结尾指针大，则返回。 
        return;
    int tmp = arr[begin];
    int i = begin;
    int j = end;
    while(i != j){//将代码安大小分到两边 
        while(arr[j] >= tmp && j > i)
            j--;
        while(arr[i] <= tmp && j > i)
            i++;
        if(j > i){
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
        }
    }
    arr[begin] = arr[i];
    arr[i] = tmp;
    //归并 
    Quick_Sort(arr, begin, i-1);
    Quick_Sort(arr, i+1, end);
} 
int main()
{
	int k,i,j,t; 
	cin>>k;//输入k
	int a[10] = {8,2,3,9,5,10,7,1,4,6};
	Quick_Sort(a,0,9);
	cout<<a[k-1];
}
快速排序算法思想：
快速排序是分别从两端开始”探测”的，先从右往左找一个小于tmp的数，再从左往右找一个大于tmp的数，然后交换他们。这里可以用两个变量i 和j ，分别指向序列最左边和最右边。我们为这两个变量起个名字“哨兵i ”和“哨兵j ”。刚开始的时候让哨兵i 指向序列的最左边，指向tmp。让哨兵j指向序列的最右边，指向end。
两种排序的空间复杂度都为O(n)。
2.假设有1元、2元、5元、10元、20元、50元、100元面额的纸币，它们的张数分别是c1、c2、c5、c10、c20、c50、c100。现在要用这些钱来支付K元，最少要用多少张纸币?
代码：
#include<iostream>
using namespace std;

int main()
{
	int w[7] = {1,2,5,10,20,50,100};
	int c[7] = {1,0,3,1,1,1,1};
	int n;
	cin>>n;
	int ans = 0;
	for(int i = 6;i >= 0;i--)
	{
		int t = min(n / w[i],c[i]);//使用第i张纸币的张数
		n -= t;//减去金额
		ans += t; //添加张数
	}
	cout<<ans;
}贪心算法思想：
该算法的时间复杂度为O(n),空间复杂度为：O(2 * n)
1.建立数学模型来描述问题；
2.把求解的问题分成若干个子问题；
3.对每一子问题求解，得到子问题的局部最优解；
4.把子问题的局部最优解合成原来问题的一个解。

3.使用两种算法（回溯和动态规划)实现下列问题，假设有1元、2元、5元、10元、20元、50元、100元面额的纸币，它们的张数不限。现在要用这些钱能够恰好支付K元，请问最少需要多少张纸币?如果不能恰好支付,返回不能支付的提示。

动态规划：
代码：

#include<iostream>
#include <cstring>
using namespace std;

int INF = 0x3f3f3f;
int main()
{
	int a[7] = {1,2,5,10,20,50,100};
	int k;
	cin>>k;
	int dp[k+1];
	memset(dp,INF,sizeof(dp));//初始化dp数组
	for(int i = 1;i <= k;i++)
	{
		for(int j = 6;j >= 0;j--)
		{
			if(i == a[j])//如果当i元与存在的纸币相等的话，就直接赋值 
			{
				dp[i] = 1;
			}else if(i > a[j]){//如果当i元与存在的纸币不相等的话，就在上一次所需纸币的基础上+1比较取最小值 
				dp[i] = min(dp[i],dp[i-a[j]]+1);
			}
		}
	}
	cout<<dp[k];
}
动态规划算法：
该算法的时间复杂度为O(n),空间复杂度为：O(n),因为纸币数量不限，所以不存在不能支付的数目。01背包思想。
动态规划
1.初始化dp数组
1	2	3	4	5	6	7	i	n-1      n
INF	INF	INF	INF	INF	INF	INF	…	INF	INF
INF为无穷大
2.动态规划。
（1）当纸币金额和支付金额相当时
	dp[i] = 1;//直接赋值
（2）当金额i > 纸币a[i]时
	dp[i] = min(dp[i],dp[i-a[j]]+1);//在金额i-a[j]处加一张当前金额纸币，并取当前纸币最少的最优解。
依次循环给出第i个最优解

第一次循环
1	2	3	4	5	6	7	i	n-1      n
1	INF	INF	INF	INF	INF	INF	…	INF	INF
第二次循环
1	2	3	4	5	6	7	i	n-1      n
1	1	INF	INF	INF	INF	INF	…	INF	INF
第三次循环
1	2	3	4	5	6	7	i	n-1      n
1	1	2	INF	INF	INF	INF	…	INF	INF
.
.
第n次循环
1	2	3	4	5	6	7	i	i      n
1	1	2	2	1	2	2	…	…	纸币n的最优解

输出最总答案dp[n];


回溯法：
代码：

#include <iostream>
using namespace std;
void dfs(int co[], int l, int count, int i, int& ans)//硬币向量，剩余金额，硬币数，答案
{
    if (i == 7 || count + l / co[i] >= ans) return;//硬币种类遍历完成或数量已不可能小于最优解，直接返回
    if (l % co[i] == 0)//此时答案为当前最优解（否则上一步已返回）
    {
        ans = count + l / co[i];
	}
    for (int j = l / co[i]; j > -1; j--) //j应从大到小遍历，可以极大降低计算时间
	{
        dfs(co, l - co[i] * j, count + j, i + 1, ans);
    }
    return;
}
int rett(int co[], int amount) 
{
    int ans = amount + 1;//ans最大值不可能超过amount
    dfs(co, amount, 0, 0, ans);
    return ans == amount + 1 ? -1 : ans;
}
int main()
{
	int co[7]={100,50,20,10,5,2,1};
	int k=0; 
	cout<<"请输入金额k:";
    cin>>k;//输入金额 
    cout<<"最少纸币数："<<rett(co,k);
    return 0; 
}
回溯法算法：
使用深度搜索算法，取到最优解后回溯。时间复杂度O(2^n)。一般为指数级别，存在大量的重复计算。空间复杂度空间复杂度为O(n)。
1.回溯法
使用深度优先搜索，对k（支付的钱数）的值进行分解成各个小值进行计算
dfs分三种情况讨论。
①当数组越界，或k == 0时回溯。
②当k > a[i]（i为当前数组指针，a[i]为纸币金额）时，将k-a[i]放入下一次回溯的dfs递归数组当下次回溯参数，由于未确定当前k-a[i]是否大于a[i]，因此i参数不变，纸币数量+1，return回溯。
③当k < a[i] （i为当前数组指针，a[i]为纸币金额）时，当前纸币金额a[i]的金额大于k，因此当前a[i]纸币不能作为支付的纸币，因此将参数i的值设为i-1继续dfs，直到找到合适纸币为止，return回溯。
2.回溯法图形化
k为金额，a为数组，i为当前数组指针，开始设为6；
a[7] = {1,2,5,10,20,50,100};

	if(k > a[i])	      if(k<a[i])
	…
	(重复上述动作)

							直到k==0||i<0
后回溯

